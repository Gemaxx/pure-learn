// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(PureLearnDbContext))]
    partial class PureLearnDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Category__3213E83F6B2F1F4A");

                    b.HasIndex(new[] { "LearnerId" }, "idx_category_learner_id");

                    b.HasIndex(new[] { "ParentCategoryId" }, "idx_category_parent_category_id");

                    b.ToTable("Category", null, t =>
                        {
                            t.HasTrigger("trg_soft_delete_category");

                            t.HasTrigger("trg_update_category_updated_at");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.Goal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completion_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<string>("Motivation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("motivation");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("term");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Goal__3213E83F4B8AC773");

                    b.HasIndex(new[] { "CategoryId" }, "idx_goal_category_id");

                    b.HasIndex(new[] { "LearnerId" }, "idx_goal_learner_id");

                    b.ToTable("Goal", null, t =>
                        {
                            t.HasTrigger("trg_soft_delete_goal");

                            t.HasTrigger("trg_update_goal_updated_at");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.KanbanStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<int?>("MaxTasks")
                        .HasColumnType("int")
                        .HasColumnName("max_tasks");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__KanbanSt__3213E83F57FA3597");

                    b.HasIndex(new[] { "Name" }, "UQ__KanbanSt__72E12F1B5B560D7E")
                        .IsUnique();

                    b.HasIndex(new[] { "LearnerId" }, "idx_kanbanstatus_learner_id");

                    b.ToTable("KanbanStatus", (string)null);
                });

            modelBuilder.Entity("api.Models.Learner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Learner__3213E83F78F21700");

                    b.HasIndex(new[] { "Email" }, "UQ__Learner__AB6E6164FBEEBA46")
                        .IsUnique();

                    b.ToTable("Learner", null, t =>
                        {
                            t.HasTrigger("trg_update_learner_updated_at");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.LearningResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("GoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("goal_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<int>("Progress")
                        .HasColumnType("int")
                        .HasColumnName("progress");

                    b.Property<long?>("SubgoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("subgoal_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("TotalUnits")
                        .HasColumnType("int")
                        .HasColumnName("total_units");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Learning__3213E83F012A92B3");

                    b.HasIndex(new[] { "CategoryId" }, "idx_learningresource_category_id");

                    b.HasIndex(new[] { "GoalId" }, "idx_learningresource_goal_id");

                    b.HasIndex(new[] { "LearnerId" }, "idx_learningresource_learner_id");

                    b.HasIndex(new[] { "SubgoalId" }, "idx_learningresource_subgoal_id");

                    b.HasIndex(new[] { "TypeId" }, "idx_learningresource_type_id");

                    b.ToTable("LearningResource", null, t =>
                        {
                            t.HasTrigger("trg_update_learningresource_updated_at");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.LearningResourceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("unit_type");

                    b.HasKey("Id")
                        .HasName("PK__Learning__3213E83FD14E54DB");

                    b.HasIndex(new[] { "Name" }, "UQ__Learning__72E12F1BA472CB30")
                        .IsUnique();

                    b.HasIndex(new[] { "UnitType" }, "UQ__Learning__978BEDD53942A437")
                        .IsUnique();

                    b.HasIndex(new[] { "LearnerId" }, "idx_learningresourcetype_learner_id");

                    b.ToTable("LearningResourceType", (string)null);
                });

            modelBuilder.Entity("api.Models.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("GoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("goal_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<long?>("SubgoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("subgoal_id");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Note__3213E83F92F5C8DD");

                    b.HasIndex(new[] { "CategoryId" }, "idx_note_category_id");

                    b.HasIndex(new[] { "GoalId" }, "idx_note_goal_id");

                    b.HasIndex(new[] { "LearnerId" }, "idx_note_learner_id");

                    b.HasIndex(new[] { "SubgoalId" }, "idx_note_subgoal_id");

                    b.HasIndex(new[] { "TaskId" }, "idx_note_task_id");

                    b.ToTable("Note", null, t =>
                        {
                            t.HasTrigger("trg_update_note_updated_at");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.Subgoal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long>("GoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("goal_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Subgoal__3213E83F5F751E7D");

                    b.HasIndex(new[] { "GoalId" }, "idx_subgoal_goal_id");

                    b.ToTable("Subgoal", null, t =>
                        {
                            t.HasTrigger("trg_update_subgoal_updated_at");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.Subtask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Subtask__3213E83F63A2F46B");

                    b.HasIndex(new[] { "TaskId" }, "idx_subtask_task_id");

                    b.ToTable("Subtask", null, t =>
                        {
                            t.HasTrigger("trg_update_subtask_updated_at");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEd_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("EisenhowerStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("eisenhower_status");

                    b.Property<TimeOnly?>("EstimatedTime")
                        .HasColumnType("time")
                        .HasColumnName("estimated_time");

                    b.Property<long?>("GoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("goal_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("KanbanStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("kanban_status_id");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<long?>("LearningResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("learning_resource_id");

                    b.Property<DateOnly?>("RepeatEndDate")
                        .HasColumnType("date")
                        .HasColumnName("repeat_end_date");

                    b.Property<int?>("RepeatEndOccurrences")
                        .HasColumnType("int")
                        .HasColumnName("repeat_end_occurrences");

                    b.Property<string>("RepeatEnds")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("repeat_ends");

                    b.Property<string>("RepeatFrequency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("None")
                        .HasColumnName("repeat_frequency");

                    b.Property<int?>("RepeatInterval")
                        .HasColumnType("int")
                        .HasColumnName("repeat_interval");

                    b.Property<bool?>("RepeatOnFriday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repeat_on_friday");

                    b.Property<bool?>("RepeatOnMonday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repeat_on_monday");

                    b.Property<bool?>("RepeatOnSaturday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repeat_on_saturday");

                    b.Property<bool?>("RepeatOnSunday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repeat_on_sunday");

                    b.Property<bool?>("RepeatOnThursday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repeat_on_thursday");

                    b.Property<bool?>("RepeatOnTuesday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repeat_on_tuesday");

                    b.Property<bool?>("RepeatOnWednesday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repeat_on_wednesday");

                    b.Property<long?>("SubgoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("subgoal_id");

                    b.Property<TimeOnly?>("TimeSpent")
                        .HasColumnType("time")
                        .HasColumnName("time_spent");

                    b.Property<string>("TimeTaskRelated")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("time_task_related");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Task__3213E83F69BC2DC8");

                    b.HasIndex(new[] { "CategoryId" }, "idx_task_category_id");

                    b.HasIndex(new[] { "GoalId" }, "idx_task_goal_id");

                    b.HasIndex(new[] { "KanbanStatusId" }, "idx_task_kanban_status_id");

                    b.HasIndex(new[] { "LearnerId" }, "idx_task_learner_id");

                    b.HasIndex(new[] { "LearningResourceId" }, "idx_task_learning_resource_id");

                    b.HasIndex(new[] { "SubgoalId" }, "idx_task_subgoal_id");

                    b.HasIndex(new[] { "TypeId" }, "idx_task_type_id");

                    b.ToTable("Task", null, t =>
                        {
                            t.HasTrigger("trg_soft_delete_task");

                            t.HasTrigger("trg_update_task_updated_at");

                            t.HasTrigger("trg_validate_task_repeat_end_date");

                            t.HasTrigger("trg_validate_task_time_spent");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.TaskType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("LearnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("learner_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__TaskType__3213E83FBD5F41F1");

                    b.HasIndex(new[] { "Name" }, "UQ__TaskType__72E12F1BF080C4B8")
                        .IsUnique();

                    b.HasIndex(new[] { "LearnerId" }, "idx_tasktype_learner_id");

                    b.ToTable("TaskType", (string)null);
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("Categories")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Category__learne__6383C8BA");

                    b.HasOne("api.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK__Category__parent__6477ECF3");

                    b.Navigation("Learner");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("api.Models.Goal", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Goals")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Goal__category_i__6B24EA82");

                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("Goals")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Goal__learner_id__6C190EBB");

                    b.Navigation("Category");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("api.Models.KanbanStatus", b =>
                {
                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("KanbanStatuses")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__KanbanSta__learn__04E4BC85");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("api.Models.LearningResource", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("LearningResources")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__LearningR__categ__7D439ABD");

                    b.HasOne("api.Models.Goal", "Goal")
                        .WithMany("LearningResources")
                        .HasForeignKey("GoalId")
                        .HasConstraintName("FK__LearningR__goal___7E37BEF6");

                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("LearningResources")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearningR__learn__7C4F7684");

                    b.HasOne("api.Models.Subgoal", "Subgoal")
                        .WithMany("LearningResources")
                        .HasForeignKey("SubgoalId")
                        .HasConstraintName("FK__LearningR__subgo__7F2BE32F");

                    b.HasOne("api.Models.LearningResourceType", "Type")
                        .WithMany("LearningResources")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearningR__type___787EE5A0");

                    b.Navigation("Category");

                    b.Navigation("Goal");

                    b.Navigation("Learner");

                    b.Navigation("Subgoal");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("api.Models.LearningResourceType", b =>
                {
                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("LearningResourceTypes")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearningR__learn__75A278F5");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("api.Models.Note", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Notes")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Note__category_i__29221CFB");

                    b.HasOne("api.Models.Goal", "Goal")
                        .WithMany("Notes")
                        .HasForeignKey("GoalId")
                        .HasConstraintName("FK__Note__goal_id__2A164134");

                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("Notes")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Note__learner_id__2CF2ADDF");

                    b.HasOne("api.Models.Subgoal", "Subgoal")
                        .WithMany("Notes")
                        .HasForeignKey("SubgoalId")
                        .HasConstraintName("FK__Note__subgoal_id__2B0A656D");

                    b.HasOne("api.Models.Task", "Task")
                        .WithMany("Notes")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK__Note__task_id__2BFE89A6");

                    b.Navigation("Category");

                    b.Navigation("Goal");

                    b.Navigation("Learner");

                    b.Navigation("Subgoal");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("api.Models.Subgoal", b =>
                {
                    b.HasOne("api.Models.Goal", "Goal")
                        .WithMany("Subgoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Subgoal__goal_id__70DDC3D8");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("api.Models.Subtask", b =>
                {
                    b.HasOne("api.Models.Task", "Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Subtask__task_id__245D67DE");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("api.Models.Task", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Task__category_i__1BC821DD");

                    b.HasOne("api.Models.Goal", "Goal")
                        .WithMany("Tasks")
                        .HasForeignKey("GoalId")
                        .HasConstraintName("FK__Task__goal_id__1CBC4616");

                    b.HasOne("api.Models.KanbanStatus", "KanbanStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("KanbanStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Task__kanban_sta__0C85DE4D");

                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("Tasks")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Task__learner_id__1AD3FDA4");

                    b.HasOne("api.Models.LearningResource", "LearningResource")
                        .WithMany("Tasks")
                        .HasForeignKey("LearningResourceId")
                        .HasConstraintName("FK__Task__learning_r__1EA48E88");

                    b.HasOne("api.Models.Subgoal", "Subgoal")
                        .WithMany("Tasks")
                        .HasForeignKey("SubgoalId")
                        .HasConstraintName("FK__Task__subgoal_id__1DB06A4F");

                    b.HasOne("api.Models.TaskType", "Type")
                        .WithMany("Tasks")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Task__type_id__0B91BA14");

                    b.Navigation("Category");

                    b.Navigation("Goal");

                    b.Navigation("KanbanStatus");

                    b.Navigation("Learner");

                    b.Navigation("LearningResource");

                    b.Navigation("Subgoal");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("api.Models.TaskType", b =>
                {
                    b.HasOne("api.Models.Learner", "Learner")
                        .WithMany("TaskTypes")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__TaskType__learne__08B54D69");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("InverseParentCategory");

                    b.Navigation("LearningResources");

                    b.Navigation("Notes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("api.Models.Goal", b =>
                {
                    b.Navigation("LearningResources");

                    b.Navigation("Notes");

                    b.Navigation("Subgoals");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("api.Models.KanbanStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("api.Models.Learner", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Goals");

                    b.Navigation("KanbanStatuses");

                    b.Navigation("LearningResourceTypes");

                    b.Navigation("LearningResources");

                    b.Navigation("Notes");

                    b.Navigation("TaskTypes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("api.Models.LearningResource", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("api.Models.LearningResourceType", b =>
                {
                    b.Navigation("LearningResources");
                });

            modelBuilder.Entity("api.Models.Subgoal", b =>
                {
                    b.Navigation("LearningResources");

                    b.Navigation("Notes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("api.Models.Task", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("api.Models.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
